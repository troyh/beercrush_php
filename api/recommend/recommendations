#!/bin/bash

debug=0;
email=;
password=;
doctype=;

while getopts "C:de:p:t:" opt; do
	case $opt in
		C)
			conf_file=$OPTARG;
			;;
		d)
			debug=1;
			;;
		e)
			email=$OPTARG;
			;;
		p)
			password=$OPTARG;
			;;
		t)
			doctype=$OPTARG;
			;;
		\?)
			# echo "Invalid option: -$OPTARG" >&2
			exit 1;
			;;
	esac
done

function usage() {
	cat <<EOF
Usage: ${0##*/} -C <config file> -e <email> -p <password>

  -C   Path to config file
  -e   Email for admin user (to log into Beer Crush)
  -p   Password for admin user (to log into Beer Crush)
  -t   Type of reviews (beer or place) to base recommendatios on

EOF
	exit 1;
}

if [ -z "$conf_file" -o -z "$email" -o -z "$password" ]; then
	usage;
fi

if [ ! -f $conf_file ]; then
	echo "$conf_file doesn't exist";
	usage;
fi

data_dir="/var/local/BeerCrush/recommend/$doctype";

read couchdb_host couchdb_db <<<$(/usr/local/beercrush/bin/jsonpath -1 "couchdb.nodes[0]" couchdb.database < $conf_file);
read api_url <<<$(/usr/local/beercrush/bin/jsonpath -1 api.base_uri < $conf_file);

if [ ! -d $data_dir ]; then mkdir -p $data_dir; fi

if [ "$doctype" = "beer" ]; then
	reviews_view_url="http://$couchdb_host/$couchdb_db/_design/beer_reviews/_view/by_user";
	reviews_stats_url="http://$couchdb_host/$couchdb_db/_design/beer_reviews/_view/stats_per_beer?group=true";
elif [ "$doctype" = "place" ]; then
	reviews_view_url="http://$couchdb_host/$couchdb_db/_design/place_reviews/_view/by_user_id";
	reviews_stats_url="http://$couchdb_host/$couchdb_db/_design/place_reviews/_view/stats_per_place?group=true";
elif [ -z "$doctype" ]; then
	usage;
else
	echo "$doctype is not valid. Must be beer or place.";
	usage;
fi

reviews_file="$data_dir/reviews.tsv";
correlations_file="$data_dir/correlations.tab";
pairs_file="$data_dir/pairs.tab";
stats_file="$data_dir/stats.tsv";
xproduct_file="$data_dir/xproduct.tab";
zscores_file="$data_dir/zscores.tab";
correlated_pairs_file="$data_dir/correlated_pairs.tab";
recommend_file="$data_dir/recommend.tab";


if [ $debug -eq 1 ]; then
	echo "Debug mode. Not deleting existing files first.";
else
	for F in $reviews_file $correlations_file $pairs_file  $stats_file  $xproduct_file  $zscores_file $correlated_pairs_file $recommend_file; do
		if [ -f $F ]; then
			rm -f $F;
		fi
	done
fi

if [ ! -f $reviews_file ]; then
	echo "Making $reviews_file";
	curl --silent $reviews_view_url | 
		sed -e '1d' -e '$d' -e 's/,\s*$//' | 
		/usr/local/beercrush/bin/jsonpath id | 
		sed -e 's/^review:[^:]\+://' -e 's/:\([^:]\+\)$/\t\1/g' | 
		awk '{print $2"\t"$1}' > $reviews_file;
fi

if [ ! -f $zscores_file ]; then
	echo "Making $zscores_file";

	if [ ! -f $stats_file ]; then
		curl --silent $reviews_stats_url | 
			sed -e '1d' -e '$d' -e 's/,\s*$//' |
			/usr/local/beercrush/bin/jsonpath key value.avg value.stddev value.count > $stats_file;
	fi

	curl --silent $reviews_view_url | 
		sed -e '1d' -e '$d' -e 's/,\s*$//' |
		/usr/local/beercrush/bin/jsonpath id value.rating |
		php -r '
		$stats=array();
		$f=fopen($argv[1],"r");
		if ($f) {
			while ($line=fgets($f)) {
				$line=preg_replace("/^[^:]+:/","",rtrim($line)); // Strip off "<itemtype>:" and newline
				list($item_id,$avg,$stddev,$count)=explode("\t",$line);
				$stats[$item_id]=array(
					"avg" => $avg,
					"stddev" => $stddev,
					"count" => $count,
				);
			}
			fclose($f);
		}
	
		$f=fopen("php://stdin","r");
		if ($f) {
			while ($line=fgets($f)) {
				$line=preg_replace("/^review:[^:]+:/","",rtrim($line)); // Strip off "review:<itemtype>:" and newline
				list($review_id,$rating)=explode("\t",$line);
				$item_id=preg_replace("/:[^:]*$/","",$review_id); // Strip off user_id part
				$s=$stats[$item_id];
				if ($s["stddev"]==0)
					$zscore=0;
				else
					$zscore=($rating-$s["avg"])/$s["stddev"];
				print "$review_id $zscore\n";
			}
			fclose($f);
		}
' $stats_file > $zscores_file;
		
fi

if [ ! -f $pairs_file ]; then
	echo "Making $pairs_file";

	LC_ALL=C sort $reviews_file |
	while read user_id item_id; do
		grep -e "^$user_id[[:space:]]" $reviews_file | cut -f 2 | sed -e "s/^/$user_id $item_id /" ; 
	done > xxx;
	
	#
	# xxx lists the user_id with every pair of items that the user has reviewed
	#
	
	# Now we need to sort each pair of item IDs so that we don't have duplicate pairs
	cat xxx| php -R '
	
	$argn=rtrim($argn);
	list($user_id,$item_id1,$item_id2)=explode(" ",$argn);
	$c=strcmp($item_id1,$item_id2);
	if ($c < 0)
		print "$item_id1 $item_id2 $user_id\n";
	else if ($c)
		print "$item_id2 $item_id1 $user_id\n";
	
	' > yyy;
	
	LC_ALL=C sort -u yyy > $pairs_file;
	
	rm -f xxx yyy;
	
fi

#
# pairs.tab is the list of unique pairs of items (that have been reviewed by each user)
#

if [ ! -f $xproduct_file ]; then
	echo "Making $xproduct_file";

	# PHP is *much* faster (seconds versus many minutes!) in doing this than Bash was
	# so it's written in PHP.
	
	cat $pairs_file |
	php -r '

	$zscores=array();
	$f=fopen($argv[1],"r");
	if ($f) {
		while ($line=fgets($f)) {
			$line=rtrim($line); // Strip off newline
			list($review_id,$zscore)=explode(" ",$line);
			$zscores[$review_id]=$zscore;
		}
		fclose($f);
	}
	
	$f=fopen("php://stdin","r");
	if ($f) {
		while ($line=fgets($f)) {
			$line=rtrim($line);
			list($item_id1,$item_id2,$user_id)=explode(" ",$line);
			$zscore1=$zscores[$item_id1.":".$user_id];
			$zscore2=$zscores[$item_id2.":".$user_id];
			if ($zscore1==0 || $zscore2==0)
				$xp=0; // Avoid the PHP negative zero result
			else
				$xp=$zscore1 * $zscore2;
			print "$item_id1 $item_id2 $user_id $xp\n";
		}
		fclose($f);
	}
' $zscores_file > $xproduct_file;

fi

#
# xproduct.tab has all the cross-product for each pair of reviews by each user
#
# Now, just go through the list and sum the cross-products of each distinct pair of item IDs
# while counting the number of distinct pairs.
#

if [ ! -f $correlations_file ]; then
	echo "Making $correlations_file";

	cat $xproduct_file |
	php -B '
	$last_item_id1=null;
	$last_item_id2=null;
	$sum=0;
	$count=0;
' -R '
	list($item_id1,$item_id2,$user_id,$product)=explode(" ",rtrim($argn));

	if ($last_item_id1 != $item_id1 || $last_item_id2 != $item_id2) {
		if ($count > 0) {
			print "$last_item_id1 $last_item_id2 $count ".($sum / $count)."\n";
		}
		$count=0;
		$sum=0;
		$last_item_id1=$item_id1;
		$last_item_id2=$item_id2;
	}

	$sum=$sum + $product;
	$count++;
' -E '
	// The final one...
	print "$item_id1 $item_id2 $count ".($sum / $count)."\n";
' > $correlations_file;


fi

#
# correlations.tab has the correlation-coefficients. 
#
# Now, run through the file and if it meets the threshold for significance, each
# item is a recommendation for the other.
#

if [ ! -f $correlated_pairs_file ]; then
	echo "Making $correlated_pairs_file";
	
	cat $correlations_file |
	php -B '
	$thresholds=array(
	2 	=> .88,
	3 	=> .63,
	4 	=> .51,
	5 	=> .44,
	6 	=> .40,
	7 	=> .38,
	8 	=> .26,
	9 => 	.20,
	);
	' -R '
	list($item_id1,$item_id2,$count,$stddev)=explode(" ",$argn);
	foreach ($thresholds as $s=>$m) {
		if ($count >= $s && $stddev >= $m) {
			print "$item_id1 $item_id2\n";
			print "$item_id2 $item_id1\n";
			break;
		}
	}
' > $correlated_pairs_file;

fi

if [ ! -f $recommend_file ]; then
	echo "Making $recommend_file";
	
	LC_ALL=C sort $correlated_pairs_file | 
	php -B '
	$last_item_id=null;
	$doc=new stdClass;
	$itemtype=$argv[1];
' -R '
	list($item_id,$other_item_id)=explode(" ",rtrim($argn));
	if ($item_id != $last_item_id) {
		if ($doc->_id)
			print $doc->_id."\n".join("\n",$doc->item)."\n\n";
		$last_item_id=$item_id;

		$doc->_id="recommend:{$itemtype}:".$item_id;
		$doc->item=array();
	}
	$doc->item[]="$itemtype:".$other_item_id;
' -E '
	print $doc->_id."\n".join("\n",$doc->item)."\n\n";
' $doctype > $recommend_file;

fi

if [ -f $recommend_file ]; then

	# Log in
	logininfo=$(curl --silent --fail -d email=$email -d password=$password $api_url/login);
	if [ $? != 0 ]; then
		echo "Unable to login";
		exit;
	fi

	read userid usrkey <<<$(echo $logininfo | /usr/local/beercrush/bin/jsonpath userid usrkey);
	
	recommend_id=;
	if [ -f $data_dir/postdata ]; then
		rm -f $data_dir/postdata;
	fi

	fails=0;
	successes=0;
	
	while read line; do
		if [ -z $line ]; then
			if [ -n $recommend_id ]; then
				RESPONSE=$(curl --silent --fail -X POST -d userid=$userid -d usrkey=$usrkey --data-urlencode recommended@$data_dir/postdata "$api_url/recommend/edit?id=${recommend_id}");
				if [ $? -ne 0 ]; then
					echo "Failed to post recommendations: $recommend_id";
					fails=$((fails + 1));
				else
					successes=$((successes + 1));
				fi
			fi
			rm -f $data_dir/postdata;
			recommend_id=;
		elif [ -z $recommend_id ]; then
			recommend_id=$line;
		else
			echo $line >> $data_dir/postdata;
		fi
	done < $recommend_file;
	
	echo "Recommendations completed. $successes successes, $fails failures.";

fi
