#!/usr/bin/php
<?php
require_once('beercrush/BeerCrushClient.class.php');

$config=json_decode(@file_get_contents("/etc/BeerCrush/webapp.conf"));

$breweries_data=json_decode(@file_get_contents($config->api->base_uri.'/breweries'));

if (is_null($breweries_data))
{
	print "Unable to get brewery name data\n";
	exit;
}

$styles_data=json_decode(@file_get_contents($config->api->base_uri.'/beerstyles'));

if (is_null($styles_data))
{
	print "Unable to get styles data\n";
	exit;
}

// Make breweries index
$breweries=array();
foreach ($breweries_data as $letter=>$list)
{
	foreach ($list as $brewery)
	{
		$breweries[$brewery->name]=$brewery->id;
	}
}

// Make styles index
$styles=array();
foreach ($styles_data->styles as $toplevel)
{
	foreach ($toplevel->styles as $style)
	{
		$styles[$style->name]=$style;
	}
}
print_r($styles);exit;

$bc=new BeerCrushClient($config->api->base_uri,'troy.hakala@gmail.com','blah');

$line=0;
while ($txt=fgets(STDIN))
{
	++$line;
	
	$doc=json_decode($txt);
	
	$beer=new stdClass;

	foreach ($doc as $k=>$v)
	{
		switch ($k)
		{
		case 'brewery':
			$beer->brewery=$v;
			if (isset($breweries[$v]))
			{
				$beer->brewery_id=$breweries[$v];
			}
			break;
		case 'beer name':
			$beer->name=trim($v);
			break;
		case 'description from brewer':
			$beer->description=trim($v);
			break;
		case 'availability':
			$beer->availability=$v;
			break;
		case 'style':
			if ($v=='Boehmian Pilsner')
				$v='Bohemian Pilsner';
			$beer->style_text=$v;
			if (isset($styles[$v]))
			{
				$beer->style=$styles[$v]->id;
			}
			break;
		case 'color':
			if (!empty($v))
				$beer->srm=$v;
			break;
		case 'ABV':
		case 'OG':
		case 'FG':
		case 'IBU':
		case 'grains':
		case 'hops':
		case 'yeast':
			$beer->$k=$v;
			break;
		case 'other ingredients':
			$beer->otherings=$v;
			break;
		case 'size':
			$beer->size=$v;
			break;
		case 'upc':
			$beer->upc=$v;
			break;
		case 'calories':
		case 'calories/serving size':
			if (!empty($v))
				$beer->$k=$v;
			break;
		default:
			if (!empty($v))
				print "Dropping field: $k=$v\n";
			break;
		}
	}
	
	if (!empty($beer->{'calories/serving size'}))
	{
		// 1 fl. oz=0.02957353 liters=29.57353ml
		$beer->calories_per_ml=$beer->calories/($beer->{'calories/serving size'} * 29.57353);
		// print "calories/ml=".$beer->calories_per_ml." ".$beer->calories.' '.$beer->{'calories/serving size'}."\n";
	}

	// print $doc->name.' ';
	// print $doc->type."\n";
	// print $beer->brewery."\n";
	// print $beer->name."\n";
	// print $beer->description."\n";
	// print $beer->availability."\n";
	// print $beer->style."\n";
	// print "SRM:".$beer->srm."\n";
	// print $beer->ABV."\n";
	// print $beer->OG."\n";
	// print $beer->FG."\n";
	// print $beer->IBU."\n";
	// print $beer->grains."\n";
	// print $beer->hops."\n";
	// print $beer->yeast."\n";
	// print $beer->otherings."\n";
	// print $beer->calories_per_ml."\n";

	if (!isset($beer->brewery_id))
	{
		print "Unable to match brewery: ".$beer->brewery." (line $line)\n";
	}
	else if (!empty($beer->style_text) && !isset($beer->style))
	{
		print "Unable to match style: ".$beer->style_text." (line $line)\n";
	}
	else
	{
		$newDoc=new stdClass;
		$status_code=$bc->newBeer($beer,$newDoc);
		if ($status_code!=200)
		{
			print "Failed ($status_code) to add: ".$beer->name." (line $line)\n";
			print_r($newDoc);
		}
		else
		{
			// print "OK:".$newDoc->name.' '.$newDoc->_id."\n";
			// print_r($newDoc);
		}
	}
}

?>