#!/usr/bin/php
<?php
require_once('beercrush/beercrush.php');
require_once('OAK/jobs.class.php');

$opts=getopt('C:k');
if (empty($opts['C'])) {
	$cmd=basename($argv[0]);
	print <<<EOF
Usage: $cmd -C <config file>

	-C	Path to uncache.conf file
	-k	Keep existing NGiNX caches (optional) [NYI]
	
EOF;
	exit;
}

$config=json_decode(@file_get_contents($opts['C']));
if (is_null($config)) {
	print "Unable to read config\n";
	exit;
}

// if (!isset($opts['k'])) {
// 	// Delete the caches
// 	"/var/local/nginx/caches/"
// }

$oak=new OAK(BeerCrush::CONF_FILE);

$dependencies=array();

$oakjobs=new OAKJobs($oak,array('dbchanges','docchanges','dependency','viewchanges'));
// Every instance gets handle_message() called
$oakjobs->set_message_callback('handle_message');
// Only one instance of couchdb-proxy gets handle_job() called
$oakjobs->gimme_jobs('handle_job','sig_handler');




function print_dependencies($dependencies,$h) {
	$keys=array_keys($dependencies);
	sort($keys);
	foreach ($keys as $url) {
		fprintf($h,"$url\n\t".join("\n\t",array_keys($dependencies[$url]))."\n");
	}
}

function print_dependencies_size($dependencies,$h) {
	$total=0;
	foreach ($dependencies as $k=>$a) {
		$total+=strlen($k);
		foreach ($a as $k=>$void) {
			$total+=strlen($k);
		}
	}
	fprintf($h,(int)($total/1024)."K\n");
}

function add_dependency($source_url,$dep_url) {
	global $dependencies;
	global $oak;
	global $config;

	if (!array_key_exists($source_url,$dependencies))
		$dependencies[$source_url]=array();
	if (!array_key_exists($dep_url,$dependencies[$source_url])) {
		$dependencies[$source_url][$dep_url]=1; // 1 is arbitrary, just has to be some value

		// Add any extras too
		foreach ($config->dependencies as $dep) {
			if (isset($dep->extra)) {

				if (!substr_compare($source_url,'http://',0,7,true)) { // If it looks like a URL
					$url_parts=parse_url($source_url);
					$source_path=$url_parts['path'];
				}
				else
					$source_path=$source_url;

				// See if the source matches first...
				if (preg_match('|'.$dep->source.'|',$source_path)) {
					foreach ($dep->extra as $extra_regex_replacement) {
						$extra=preg_replace('|'.$dep->source.'|',$extra_regex_replacement,$source_path);
						if (!is_null($extra)) { // $extra is the extra source to add
							$dependencies[$source_url][$extra]=2; // 2 is arbitrary, just a different value from the 1 above
						}
					}
				}
			}
		}
	}
}

function ignored_dependency($source_url,$dep_url) {
	global $oak;
	global $config;
	
	$url_parts=parse_url($source_url);
	$source_path=$url_parts['path'];

	$url_parts=parse_url($dep_url);
	$dep_path=$url_parts['path'];
	
	// Iterate list of ignored dependencies to see if this one is in the list
	foreach ($config->dependencies as $dependency) {
		if (isset($dependency->ignore)) {
			if (preg_match('|'.$dependency->source.'|',$source_path)) {
				foreach ($dependency->ignore as $dependency_regex) {
					if (preg_match('|'.$dependency_regex.'|',$dep_path)) {
						return true;
					}
				}
				break;
			}
		}
	}
	return false;
}

function handle_message($oakjobs,$job,$msg) {
	global $dependencies;

	if (in_array('dependency',$msg['groups'])) {

		if (isset($job->doc_id))
			$source_url=$job->doc_id;
		else {
			$url_parts=parse_url($job->doc_url);
			$source_url=$url_parts['scheme'].'://'.$url_parts['host'].':'.(isset($url_parts['port'])?$url_parts['port']:'80').$url_parts['path'];
		}

		$url_parts=parse_url($job->url);
		if (!ignored_dependency($source_url,$url_parts['path']))
			add_dependency($source_url,$job->url);
	}
	else if (in_array('docchanges',$msg['groups'])) {
		foreach_dependency($job,'purge_url');
	}
	else if (in_array('dbchanges',$msg['groups'])) {
		foreach_dependency($job->id,'purge_url');
	}
	else if (in_array('viewchanges',$msg['groups'])) {
		$oakjobs->getOAK()->purge_document_cache($job,7000); // TODO: don't hardcode the port number
	}
}

function handle_job($oakjobs,$job) {
	/*
	$job could be from any of the groups: dependency, dbchanges or docchanges. So we need
	to verify
	*/
	if (isset($job->url)) { // It's a dependency message
		// Ignore it
	}
	else if (isset($job->id)) { // It's a dbchanges message
		foreach_dependency($job->id,'announce_docchange');
	}
	else { // It's a docchanges message
		foreach_dependency($job,'announce_docchange');
	}

	return true;
}

function foreach_dependency($url,$func) {
	global $dependencies;
	global $oak;
	
	$url=(string)$url; // Not sure why this is necessary, but array_key_exists() doesn't match it if it's not done.
	if (array_key_exists($url,$dependencies)) {
		foreach (array_keys($dependencies[$url]) as $uncache_url) {
			call_user_func($func,$uncache_url);
		}
	}
	else {
		$oak->log('No action: '.$url);
	}
}

function purge_url($uncache_url) {
	global $oak;
	
	$url_parts=parse_url($uncache_url);

	$path=$url_parts['path'];
	if (!empty($url_parts['query']))
		$path.='?'.$url_parts['query'];
	
	if (empty($url_parts['port']))
		$port=80;
	else
		$port=$url_parts['port'];

	$oak->purge_document_cache($path,$port);
	
}

function announce_docchange($job) {
	global $oak;
	$oak->broadcast_msg('docchanges',$job);
}

function sig_handler($signo) {
	global $oakjobs;
	global $dependencies;

	switch ($signo)
	{
	case SIGUSR1: // 10      /* User-defined signal 1 (POSIX).  */
		$fn=$oakjobs->getOAK()->get_config_info()->file_locations->LOCAL_DIR.'/uncache.dependencies';
		$fh=fopen($fn,'w');
		if (!$fh) {
			$oakjobs->getOAK()->log('Unable to open '.$fn.' to dump dependencies',OAK::LOGPRI_ERR);
		}
		else {
			print_dependencies_size($dependencies,$fh);
			print_dependencies($dependencies,$fh);
			fclose($fh);
			$oakjobs->getOAK()->log('Dumped dependencies to '.$fn);
		}
		break;
	case SIGHUP:  // 1
	case SIGTERM: // 15
	case SIGINT:  // 2
	case SIGQUIT: // 3       /* Quit (POSIX).  */
	case SIGABRT: // 6       /* Abort (ANSI).  */
	case SIGKILL: // 9       /* Kill, unblockable (POSIX).  */
	case SIGSTOP: // 19      /* Stop, unblockable (POSIX).  */
	case SIGTSTP: // 20      /* Keyboard stop (POSIX).  */
		$oakjobs->gimme_jobs_stop();
		break;
	case SIGUSR2: // 12      /* User-defined signal 2 (POSIX).  */
	case SIGCONT: // 18      /* Continue (POSIX).  */
		break;
	default:
		$oakjobs->getOAK()->log('sig_handler: unhandled '.$signo);
		break;
	}
}
?>